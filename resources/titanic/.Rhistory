}
for( j in 1:10 ) {
row  <- fpkmList[[ libraryNumber ]][ j, ]
#print( row )
id  <- as.character( row[ 1 ] )
print( id )
geneIndex  <- map[[ id ]]
#     if( length( geneIndex ) != 0 ) {
#       fpkm <- row[ 10 ]
#       fpkm_conf_lo <- row[ 11 ]
#       fpkm_conf_hi <- row[ 12 ]
#       gene  <- geneList[[ geneIndex ]]
#       geneList[[ geneIndex ]]  <- gene.addColumn( gene=gene, col=libraryNumber, fpkm=fpkm, fpkm_conf_lo=fpkm_conf_lo, fpkm_conf_hi=fpkm_conf_hi )
#     }
}
for( j in 1:10 ) {
row  <- fpkmList[[ libraryNumber ]][ j, ]
#print( row )
id  <- as.character( row[ 1 ] )
#print( id )
geneIndex  <- map[[ id ]]
if( length( geneIndex ) != 0 ) {
fpkm <- row[ 10 ]
fpkm_conf_lo <- row[ 11 ]
fpkm_conf_hi <- row[ 12 ]
gene  <- geneList[[ geneIndex ]]
print( gene.getId( gene ) )
geneList[[ geneIndex ]]  <- gene.addColumn( gene=gene, col=libraryNumber, fpkm=fpkm, fpkm_conf_lo=fpkm_conf_lo, fpkm_conf_hi=fpkm_conf_hi )
}
}
for( i in 1:length( fpkmList ) ) {
libraryNumber  <- i
for( j in 1:length( fpkmList[[ libraryNumber ]][,1] ) ) {
row  <- fpkmList[[ libraryNumber ]][ j, ]
#print( row )
id  <- as.character( row[ 1 ] )
#print( id )
geneIndex  <- map[[ id ]]
if( length( geneIndex ) != 0 ) {
fpkm <- row[ 10 ]
fpkm_conf_lo <- row[ 11 ]
fpkm_conf_hi <- row[ 12 ]
gene  <- geneList[[ geneIndex ]]
#print( gene.getId( gene ) )
geneList[[ geneIndex ]]  <- gene.addColumn( gene=gene, col=libraryNumber, fpkm=fpkm, fpkm_conf_lo=fpkm_conf_lo, fpkm_conf_hi=fpkm_conf_hi )
}
}
}
source("~/Dropbox/AlternativeSplicing/temp/scripts/gene.R")
#names  <- c("library1","library2","library3","library4","library5","library6","library7","library8","library9","library10","library11","library12","library13","library14","library15","library16" )
names  <- c("RS11_BC1_Pts2","RS11_BC2_Pts3","RS11_BC3_HC35","RS11_BC4_Pts39","RS11_BC5_Pts1","RS11_BC6_HC34","RS11_BC7_HC24","RS11_BC8_Pts50","RS11_BC9_Pts36","RS11_BC10_Pts47","RS11_BC11_Pts38","RS11_BC12_HC31","RS11_BC13_Pts9","RS11_BC14_Pts40","RS11_BC15_MEC_C5","RS11_BC16_MEC_scramble" )
fpkmList   <- as.list( rep(NA,length(names)) )
fpkmList[[ 1 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/1_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 2 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/2_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
ids  <- unique( c( fpkmList[[ 1 ]]$tracking_id, fpkmList[[ 2 ]]$tracking_id ) )
ids  <- ids[ grep(pattern="EN",x=ids ) ]
geneList  <- sapply( ids, gene.constructor, names=names )
# Hash positions of genes
map <- new.env(hash=T, parent=emptyenv())
for( i in 1:length( geneList ) ) {
map[[ gene.getId( geneList[[ i ]] ) ]]  <- i
}
# Load FPKMs
for( i in 1:length( fpkmList ) ) {
libraryNumber  <- i
for( j in 1:length( fpkmList[[ libraryNumber ]][,1] ) ) {
row  <- fpkmList[[ libraryNumber ]][ j, ]
#print( row )
id  <- as.character( row[ 1 ] )
#print( id )
geneIndex  <- map[[ id ]]
if( length( geneIndex ) != 0 ) {
fpkm <- row[ 10 ]
fpkm_conf_lo <- row[ 11 ]
fpkm_conf_hi <- row[ 12 ]
gene  <- geneList[[ geneIndex ]]
#print( gene.getId( gene ) )
geneList[[ geneIndex ]]  <- gene.addColumn( gene=gene, col=libraryNumber, fpkm=fpkm, fpkm_conf_lo=fpkm_conf_lo, fpkm_conf_hi=fpkm_conf_hi )
}
}
}
fpkmList
length( fpkmList )
rm( list=ls() )
source("~/Dropbox/AlternativeSplicing/temp/scripts/gene.R")
#names  <- c("library1","library2","library3","library4","library5","library6","library7","library8","library9","library10","library11","library12","library13","library14","library15","library16" )
#names  <- c("RS11_BC1_Pts2","RS11_BC2_Pts3","RS11_BC3_HC35","RS11_BC4_Pts39","RS11_BC5_Pts1","RS11_BC6_HC34","RS11_BC7_HC24","RS11_BC8_Pts50","RS11_BC9_Pts36","RS11_BC10_Pts47","RS11_BC11_Pts38","RS11_BC12_HC31","RS11_BC13_Pts9","RS11_BC14_Pts40","RS11_BC15_MEC_C5","RS11_BC16_MEC_scramble" )
names  <- c("RS11_BC1_Pts2","RS11_BC2_Pts3" )
fpkmList   <- as.list( rep(NA,length(names)) )
fpkmList[[ 1 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/1_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 2 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/2_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 3 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/3_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 4 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/4_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 5 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/5_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 6 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/6_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 7 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/7_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 8 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/8_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 9 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/9_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 10 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/10_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 11 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/11_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 12 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/12_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 13 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/13_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 14 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/14_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 15 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/15_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
# fpkmList[[ 16 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/16_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
#ids  <- unique( c( fpkmList[[ 1 ]]$tracking_id, fpkmList[[ 2 ]]$tracking_id, fpkmList[[ 3 ]]$tracking_id, fpkmList[[ 4 ]]$tracking_id, fpkmList[[ 5 ]]$tracking_id, fpkmList[[ 6 ]]$tracking_id, fpkmList[[ 7 ]]$tracking_id, fpkmList[[ 8 ]]$tracking_id, fpkmList[[ 9 ]]$tracking_id, fpkmList[[ 10 ]]$tracking_id, fpkmList[[ 11 ]]$tracking_id, fpkmList[[ 12 ]]$tracking_id, fpkmList[[ 13 ]]$tracking_id, fpkmList[[ 14 ]]$tracking_id, fpkmList[[ 15 ]]$tracking_id, fpkmList[[ 16 ]]$tracking_id ) )
ids  <- unique( c( fpkmList[[ 1 ]]$tracking_id, fpkmList[[ 2 ]]$tracking_id ) )
ids  <- ids[ grep(pattern="EN",x=ids ) ]
geneList  <- sapply( ids, gene.constructor, names=names )
# Hash positions of genes
map <- new.env(hash=T, parent=emptyenv())
for( i in 1:length( geneList ) ) {
map[[ gene.getId( geneList[[ i ]] ) ]]  <- i
}
# Load FPKMs
for( i in 1:length( fpkmList ) ) {
libraryNumber  <- i
for( j in 1:length( fpkmList[[ libraryNumber ]][,1] ) ) {
row  <- fpkmList[[ libraryNumber ]][ j, ]
#print( row )
id  <- as.character( row[ 1 ] )
#print( id )
geneIndex  <- map[[ id ]]
if( length( geneIndex ) != 0 ) {
fpkm <- row[ 10 ]
fpkm_conf_lo <- row[ 11 ]
fpkm_conf_hi <- row[ 12 ]
gene  <- geneList[[ geneIndex ]]
#print( gene.getId( gene ) )
geneList[[ geneIndex ]]  <- gene.addColumn( gene=gene, col=libraryNumber, fpkm=fpkm, fpkm_conf_lo=fpkm_conf_lo, fpkm_conf_hi=fpkm_conf_hi )
}
}
}
gene.getFPKM( geneList[[ 1 ]])
gene.getFPKM( geneList[[ 2 ]])
gene.getFPKM( geneList[[ 3 ]])
gene.getFPKM( geneList[[ 4 ]])
gene.getFPKM( geneList[[ 5 ]])
gene.getFPKM( geneList[[ 100 ]])
gene.getFPKM( geneList[[ 101 ]])
gene.getFPKM( geneList[[ 102 ]])
gene.getFPKM( geneList[[ 103 ]])
gene.getFPKM( geneList[[ 104 ]])
a  <- sapply( geneList, gene.getFPKM )
head( a )
a  <- sapply( geneList, gene.getFPKM, simplify=T )
head( a )
m <- matrix( ncol=length( names ), nrow=length( geneList ) )
for( i in 1:length( geneList ) ) {
m[i,] <- gene.getFPKM( geneList[[ i ]] )
}
head( m )
head( m, 100 )
onlyNAs  <- rep(FALSE,length( m[,1] ) )
for( i in 1:length( m[,1] ) ) {
onlyNAs[ i ] <- length( which( is.na( m[i,] ) ) ) == length( m[i,] )
}
onlyNAs
summary( onlyNAs )
rm( list=ls() )
source("~/Dropbox/AlternativeSplicing/temp/scripts/gene.R")
#names  <- c("library1","library2","library3","library4","library5","library6","library7","library8","library9","library10","library11","library12","library13","library14","library15","library16" )
names  <- c("RS11_BC1_Pts2","RS11_BC2_Pts3","RS11_BC3_HC35","RS11_BC4_Pts39","RS11_BC5_Pts1","RS11_BC6_HC34","RS11_BC7_HC24","RS11_BC8_Pts50","RS11_BC9_Pts36","RS11_BC10_Pts47","RS11_BC11_Pts38","RS11_BC12_HC31","RS11_BC13_Pts9","RS11_BC14_Pts40","RS11_BC15_MEC_C5","RS11_BC16_MEC_scramble" )
#names  <- c("RS11_BC1_Pts2","RS11_BC2_Pts3" )
fpkmList   <- as.list( rep(NA,length(names)) )
fpkmList[[ 1 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/1_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 2 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/2_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 3 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/3_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 4 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/4_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 5 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/5_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 6 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/6_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 7 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/7_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 8 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/8_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 9 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/9_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 10 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/10_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 11 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/11_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 12 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/12_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 13 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/13_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 14 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/14_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 15 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/15_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
fpkmList[[ 16 ]] <- read.table("~/Dropbox/AlternativeSplicing/temp/fpkms/16_genes.fpkm_tracking",head=T,sep="\t",colClasses=c(rep("character",9),rep("numeric",3),"character"))
ids  <- unique( c( fpkmList[[ 1 ]]$tracking_id, fpkmList[[ 2 ]]$tracking_id, fpkmList[[ 3 ]]$tracking_id, fpkmList[[ 4 ]]$tracking_id, fpkmList[[ 5 ]]$tracking_id, fpkmList[[ 6 ]]$tracking_id, fpkmList[[ 7 ]]$tracking_id, fpkmList[[ 8 ]]$tracking_id, fpkmList[[ 9 ]]$tracking_id, fpkmList[[ 10 ]]$tracking_id, fpkmList[[ 11 ]]$tracking_id, fpkmList[[ 12 ]]$tracking_id, fpkmList[[ 13 ]]$tracking_id, fpkmList[[ 14 ]]$tracking_id, fpkmList[[ 15 ]]$tracking_id, fpkmList[[ 16 ]]$tracking_id ) )
#ids  <- unique( c( fpkmList[[ 1 ]]$tracking_id, fpkmList[[ 2 ]]$tracking_id ) )
ids  <- ids[ grep(pattern="EN",x=ids ) ]
geneList  <- sapply( ids, gene.constructor, names=names )
# Hash positions of genes
map <- new.env(hash=T, parent=emptyenv())
for( i in 1:length( geneList ) ) {
map[[ gene.getId( geneList[[ i ]] ) ]]  <- i
}
# Load FPKMs
for( i in 1:length( fpkmList ) ) {
libraryNumber  <- i
for( j in 1:length( fpkmList[[ libraryNumber ]][,1] ) ) {
row  <- fpkmList[[ libraryNumber ]][ j, ]
#print( row )
id  <- as.character( row[ 1 ] )
#print( id )
geneIndex  <- map[[ id ]]
if( length( geneIndex ) != 0 ) {
fpkm <- row[ 10 ]
fpkm_conf_lo <- row[ 11 ]
fpkm_conf_hi <- row[ 12 ]
gene  <- geneList[[ geneIndex ]]
#print( gene.getId( gene ) )
geneList[[ geneIndex ]]  <- gene.addColumn( gene=gene, col=libraryNumber, fpkm=fpkm, fpkm_conf_lo=fpkm_conf_lo, fpkm_conf_hi=fpkm_conf_hi )
}
}
}
4&20
4^20
sqrt(3.618142801E9)
###########################
# Explore titanic data
###########################
write  <- FALSE
###########################
# Load libraries and set working directory
###########################
library( ggplot2 )
library( reshape )
setwd("~/workspace/Kaggle/resources/titanic/")
###########################
# Clean data for R
# 1. Read data
# 2. Replace '?' used in Weka for NAs
# 3. Make sure that features have the right class
###########################
d <- read.csv("trainClean.csv",head=T)
d[ d == "?" ] <- NA
d$Survived  <- as.factor( d$Survived ) #
d$Pclass  <- as.factor( d$Pclass )
d$Age <- as.numeric( as.character( d$Age ) )
#d$AgeBinned  <- as.numeric( cut( x=as.numeric( d$Age ), breaks=seq(from=0,to=100,by=20), labels=seq( from=10,to=90,by=20) ) )
#d$AgeYoungOnly  <- d$Age
#d$AgeYoungOnly[ d$AgeYoungOnly > 20 ]  <- NA
d$TicketNr <- as.numeric( as.character( d$TicketNr ) )
d$CabinCount <- as.numeric( as.character( d$CabinCount ) )
d$CabinNr <- as.numeric( as.character( d$CabinNr ) )
###########################
# What is the prior propability of survival?
###########################
survived.fraction <- sum( as.numeric( as.character( d$Survived ) ) ) / length( d$Survived )
###########################
# NOMINAL FEATURES
# 1. Subset data for nominal features
# 2. Calculate fraction survived for each class within the nominal features
###########################
d.nominal  <- d[,which( sapply(d, is.factor ) ) ]
d.nominal.features  <- names( d.nominal )[ which( names( d.nominal ) != "Survived" ) ]
d.nominal$Survived  <- as.numeric( as.character( d.nominal$Survived ) )
fraction.survived <- function( featureName, d.nominal ) {
index  <- which( names( d.nominal ) == featureName )
df <- data.frame( value=d.nominal[,index], sex=d.nominal$Sex, Survived=d.nominal$Survived )
df  <- df[ !is.na( df$value ), ]
fraction.survived.perLevel <- function( level ) {
df.levelsub <- df[ df$value == level, ]
n <- length( df.levelsub$value )
survivedMale <- sum( df.levelsub[ df.levelsub$sex == "male", ]$Survived )
survivedFemale <- sum( df.levelsub[ df.levelsub$sex == "female", ]$Survived )
out  <- data.frame( feature=featureName, value=level, fractionSurvived=mean( df.levelsub$Survived ), fraction.survived.female= survivedFemale/n, fractionSurvived.male = survivedMale/n, n=n )
return(  out )
}
out  <- data.frame()
for( i in levels( df$value ) ) {
if( i != "?" ) { out <- rbind( out, fraction.survived.perLevel( i ) )  }
}
return( out )
}
# Get fraction survival for nominal features, consider only categories with > 10 samples
nominal.fractionSurvived  <- data.frame()
for( i in d.nominal.features ) {
nominal.fractionSurvived <- rbind( nominal.fractionSurvived, fraction.survived( i, d.nominal ) )
}
#############################
# Are fractions significantly different from what we expect
# Let's model the fraction survived as a bernouli trial of length n=categoryObserved with a probability p=survived.fraction
#############################
getBernouliTrialProb <- function( row ) {
size  <- as.numeric( row[ 6 ] )
x <- ( as.numeric( row[ 3 ] ) * size )
prob <- dbinom( x, size, prob=survived.fraction )
return( prob )
}
for( i in 1:nrow( nominal.fractionSurvived ) ) {
nominal.fractionSurvived$pValue[ i ] <- getBernouliTrialProb( nominal.fractionSurvived[ i, ] )
}
nominal.fractionSurvived$pValue <- p.adjust( nominal.fractionSurvived$pValue, method="bonferroni")
#pValue.nominal  <- pValue.nominal[ order( pValue.nominal$prob ), ]
#classesWithLowPValue <- nominal.fractionSurvived[ nominal.fractionSurvived$pValue < 0.05, ]
featuresWithLowPValue <- unique( nominal.fractionSurvived[ nominal.fractionSurvived$pValue < 0.01, ]$feature )
keep  <- as.character( featuresWithLowPValue )
nominal.fractionSurvived <- nominal.fractionSurvived[ nominal.fractionSurvived$feature %in% featuresWithLowPValue, ]
nominal.fractionSurvived.plot <- nominal.fractionSurvived[ nominal.fractionSurvived$n >= 10, ]
p <- ggplot( nominal.fractionSurvived.plot, aes( x = factor( value ), y = fractionSurvived, width=n/450 )  )
p <- p + geom_bar( stat = "identity",fill="white", colour="darkgreen" )
p <- p + geom_hline( aes( yintercept = survived.fraction ),colour="gray50" )
p <- p + facet_wrap( ~ feature, scale="free",  )
#p  <- p + scale_x_continuous( limits=c(0,1), name="scaled value" )
p  <- p + scale_y_continuous( limits=c(0,1), name="fraction survived" )
quartz()
if( write ) {
fileName <- "exploration/nominalFeaturesBarplots.png"
png( fileName )
show( p )
dev.off()
} else {
show( p )
}
###########################
# NUMERICAL FEATURES
# Test which features are statistically difference between classes.
# 1. Subset data for numeric features + class feature (Survived)
# 2. Perform 2-sample Kolmogorov-Smirnov test.
###########################
d.numeric  <- d[,which( sapply(d, is.numeric) ) ]
d.numeric.features  <- names( d.numeric )
d.numeric$Survived  <- d$Survived
kolmogorov.test <- function( featureName, d.numeric ) {
index  <- which( names( d.numeric ) == featureName )
df <- data.frame( value=d.numeric[,index], Survived=d.numeric$Survived )
notSurvived <- df[ df$Survived == 0 , 1 ]
survived <- df[ df$Survived == 1 , 1 ]
test  <- ks.test( survived, notSurvived )
return( test$p.value  )
}
pValues.numeric  <- sapply( d.numeric.features, function ( x ) kolmogorov.test( x, d.numeric ) )
pValues.numeric  <- p.adjust(p=pValues.numeric,method="bonferroni")
###########################
# Plot data using empirical cumulative distributions
# 1. Scale all numerical values between 0 and 1
# 2. Reformat the data such that each row contains the numeric value, the feature and the survival
# 2. Plot
###########################
d.numeric  <- d[,which( sapply(d, is.numeric) ) ]
d.numeric.scaled  <- data.frame( apply( d.numeric, MARGIN=2, function( x ) ( x - min( x, na.rm=T ) ) / diff( range( x, na.rm=T ) ) ) )
d.numeric.scaled$Survived  <- d$Survived
d.numeric.scaled.melt <- ( melt( d.numeric.scaled ) )
d.numeric.scaled.melt <- d.numeric.scaled.melt[ !is.na( d.numeric.scaled.melt$value ), ]
quartz()
p <- ggplot( d.numeric.scaled.melt, aes( value, colour = Survived ) )
p <- p + stat_ecdf()
p <- p + facet_wrap(~ variable, ncol=4 )
p  <- p + scale_x_continuous( limits=c(0,1), name="scaled value" )
p  <- p + scale_y_continuous( limits=c(0,1), name="cumulative probability" )
if( write ) {
fileName <- "exploration/numericFeaturesECDF.png"
png( fileName )
show( p )
dev.off()
} else {
show( p )
}
#################################
# Bivariate analysis.
# 1. Nominal vs. nominal
# 2. Numeric vs. nominal
# 3. Numeric vs. numeric.
#################################
#################################
# 3. Numeric vs. numeric
#################################
###########################
# Explore titanic data
###########################
write  <- TRUE
###########################
# Load libraries and set working directory
###########################
library( ggplot2 )
library( reshape )
setwd("~/workspace/Kaggle/resources/titanic/")
###########################
# Clean data for R
# 1. Read data
# 2. Replace '?' used in Weka for NAs
# 3. Make sure that features have the right class
###########################
d <- read.csv("trainClean.csv",head=T)
d[ d == "?" ] <- NA
d$Survived  <- as.factor( d$Survived ) #
d$Pclass  <- as.factor( d$Pclass )
d$Age <- as.numeric( as.character( d$Age ) )
#d$AgeBinned  <- as.numeric( cut( x=as.numeric( d$Age ), breaks=seq(from=0,to=100,by=20), labels=seq( from=10,to=90,by=20) ) )
#d$AgeYoungOnly  <- d$Age
#d$AgeYoungOnly[ d$AgeYoungOnly > 20 ]  <- NA
d$TicketNr <- as.numeric( as.character( d$TicketNr ) )
d$CabinCount <- as.numeric( as.character( d$CabinCount ) )
d$CabinNr <- as.numeric( as.character( d$CabinNr ) )
###########################
# What is the prior propability of survival?
###########################
survived.fraction <- sum( as.numeric( as.character( d$Survived ) ) ) / length( d$Survived )
###########################
# NOMINAL FEATURES
# 1. Subset data for nominal features
# 2. Calculate fraction survived for each class within the nominal features
###########################
d.nominal  <- d[,which( sapply(d, is.factor ) ) ]
d.nominal.features  <- names( d.nominal )[ which( names( d.nominal ) != "Survived" ) ]
d.nominal$Survived  <- as.numeric( as.character( d.nominal$Survived ) )
fraction.survived <- function( featureName, d.nominal ) {
index  <- which( names( d.nominal ) == featureName )
df <- data.frame( value=d.nominal[,index], sex=d.nominal$Sex, Survived=d.nominal$Survived )
df  <- df[ !is.na( df$value ), ]
fraction.survived.perLevel <- function( level ) {
df.levelsub <- df[ df$value == level, ]
n <- length( df.levelsub$value )
survivedMale <- sum( df.levelsub[ df.levelsub$sex == "male", ]$Survived )
survivedFemale <- sum( df.levelsub[ df.levelsub$sex == "female", ]$Survived )
out  <- data.frame( feature=featureName, value=level, fractionSurvived=mean( df.levelsub$Survived ), fraction.survived.female= survivedFemale/n, fractionSurvived.male = survivedMale/n, n=n )
return(  out )
}
out  <- data.frame()
for( i in levels( df$value ) ) {
if( i != "?" ) { out <- rbind( out, fraction.survived.perLevel( i ) )  }
}
return( out )
}
# Get fraction survival for nominal features, consider only categories with > 10 samples
nominal.fractionSurvived  <- data.frame()
for( i in d.nominal.features ) {
nominal.fractionSurvived <- rbind( nominal.fractionSurvived, fraction.survived( i, d.nominal ) )
}
#############################
# Are fractions significantly different from what we expect
# Let's model the fraction survived as a bernouli trial of length n=categoryObserved with a probability p=survived.fraction
#############################
getBernouliTrialProb <- function( row ) {
size  <- as.numeric( row[ 6 ] )
x <- ( as.numeric( row[ 3 ] ) * size )
prob <- dbinom( x, size, prob=survived.fraction )
return( prob )
}
for( i in 1:nrow( nominal.fractionSurvived ) ) {
nominal.fractionSurvived$pValue[ i ] <- getBernouliTrialProb( nominal.fractionSurvived[ i, ] )
}
nominal.fractionSurvived$pValue <- p.adjust( nominal.fractionSurvived$pValue, method="bonferroni")
#pValue.nominal  <- pValue.nominal[ order( pValue.nominal$prob ), ]
#classesWithLowPValue <- nominal.fractionSurvived[ nominal.fractionSurvived$pValue < 0.05, ]
featuresWithLowPValue <- unique( nominal.fractionSurvived[ nominal.fractionSurvived$pValue < 0.01, ]$feature )
keep  <- as.character( featuresWithLowPValue )
nominal.fractionSurvived <- nominal.fractionSurvived[ nominal.fractionSurvived$feature %in% featuresWithLowPValue, ]
nominal.fractionSurvived.plot <- nominal.fractionSurvived[ nominal.fractionSurvived$n >= 10, ]
p <- ggplot( nominal.fractionSurvived.plot, aes( x = factor( value ), y = fractionSurvived, width=n/450 )  )
p <- p + geom_bar( stat = "identity",fill="white", colour="darkgreen" )
p <- p + geom_hline( aes( yintercept = survived.fraction ),colour="gray50" )
p <- p + facet_wrap( ~ feature, scale="free",  )
#p  <- p + scale_x_continuous( limits=c(0,1), name="scaled value" )
p  <- p + scale_y_continuous( limits=c(0,1), name="fraction survived" )
quartz()
if( write ) {
fileName <- "exploration/nominalFeaturesBarplots.png"
png( fileName )
show( p )
dev.off()
} else {
show( p )
}
###########################
# NUMERICAL FEATURES
# Test which features are statistically difference between classes.
# 1. Subset data for numeric features + class feature (Survived)
# 2. Perform 2-sample Kolmogorov-Smirnov test.
###########################
d.numeric  <- d[,which( sapply(d, is.numeric) ) ]
d.numeric.features  <- names( d.numeric )
d.numeric$Survived  <- d$Survived
kolmogorov.test <- function( featureName, d.numeric ) {
index  <- which( names( d.numeric ) == featureName )
df <- data.frame( value=d.numeric[,index], Survived=d.numeric$Survived )
notSurvived <- df[ df$Survived == 0 , 1 ]
survived <- df[ df$Survived == 1 , 1 ]
test  <- ks.test( survived, notSurvived )
return( test$p.value  )
}
pValues.numeric  <- sapply( d.numeric.features, function ( x ) kolmogorov.test( x, d.numeric ) )
pValues.numeric  <- p.adjust(p=pValues.numeric,method="bonferroni")
###########################
# Plot data using empirical cumulative distributions
# 1. Scale all numerical values between 0 and 1
# 2. Reformat the data such that each row contains the numeric value, the feature and the survival
# 2. Plot
###########################
d.numeric  <- d[,which( sapply(d, is.numeric) ) ]
d.numeric.scaled  <- data.frame( apply( d.numeric, MARGIN=2, function( x ) ( x - min( x, na.rm=T ) ) / diff( range( x, na.rm=T ) ) ) )
d.numeric.scaled$Survived  <- d$Survived
d.numeric.scaled.melt <- ( melt( d.numeric.scaled ) )
d.numeric.scaled.melt <- d.numeric.scaled.melt[ !is.na( d.numeric.scaled.melt$value ), ]
quartz()
p <- ggplot( d.numeric.scaled.melt, aes( value, colour = Survived ) )
p <- p + stat_ecdf()
p <- p + facet_wrap(~ variable, ncol=4 )
p  <- p + scale_x_continuous( limits=c(0,1), name="scaled value" )
p  <- p + scale_y_continuous( limits=c(0,1), name="cumulative probability" )
if( write ) {
fileName <- "exploration/numericFeaturesECDF.png"
png( fileName )
show( p )
dev.off()
} else {
show( p )
}
#################################
# Bivariate analysis.
# 1. Nominal vs. nominal
# 2. Numeric vs. nominal
# 3. Numeric vs. numeric.
#################################
#################################
# 3. Numeric vs. numeric
#################################
